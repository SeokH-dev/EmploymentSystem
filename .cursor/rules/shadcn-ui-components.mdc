---
globs: src/components/ui/*.tsx
description: shadcn/ui 컴포넌트 사용 및 확장 가이드
---

# shadcn/ui 컴포넌트 사용 및 확장 가이드

## shadcn/ui 컴포넌트 구조

### 1. 컴포넌트 파일 구조
shadcn/ui 컴포넌트는 `src/components/ui/` 디렉토리에 위치하며, 다음과 같은 구조를 가집니다:

```
src/components/ui/
├── button.tsx          # 버튼 컴포넌트
├── buttonVariants.ts   # 버튼 변형 정의
├── card.tsx            # 카드 컴포넌트
├── input.tsx           # 입력 필드 컴포넌트
├── dialog.tsx          # 다이얼로그 컴포넌트
├── form.tsx            # 폼 컴포넌트
└── utils.ts            # 유틸리티 함수
```

### 2. 컴포넌트 사용 패턴
```tsx
// ✅ 좋은 예 - 기본 사용법
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';

// ✅ 좋은 예 - 컴포넌트 조합
<Card className="w-full max-w-md">
  <CardHeader>
    <CardTitle>폼 제목</CardTitle>
  </CardHeader>
  <CardContent className="space-y-4">
    <div className="space-y-2">
      <Label htmlFor="email">이메일</Label>
      <Input id="email" type="email" placeholder="이메일을 입력하세요" />
    </div>
    <Button className="w-full">제출</Button>
  </CardContent>
</Card>
```

## 컴포넌트 변형 및 확장

### 1. Button 컴포넌트 확장
```tsx
// ✅ 좋은 예 - 버튼 변형 사용
<Button variant="default">기본 버튼</Button>
<Button variant="destructive">삭제 버튼</Button>
<Button variant="outline">아웃라인 버튼</Button>
<Button variant="secondary">보조 버튼</Button>
<Button variant="ghost">고스트 버튼</Button>
<Button variant="link">링크 버튼</Button>

// ✅ 좋은 예 - 크기 변형
<Button size="default">기본 크기</Button>
<Button size="sm">작은 크기</Button>
<Button size="lg">큰 크기</Button>
<Button size="icon">아이콘 버튼</Button>
```

### 2. Card 컴포넌트 활용
```tsx
// ✅ 좋은 예 - 카드 레이아웃
<Card className="w-full">
  <CardHeader>
    <CardTitle>카드 제목</CardTitle>
    <CardDescription>카드 설명</CardDescription>
  </CardHeader>
  <CardContent>
    <p>카드 내용</p>
  </CardContent>
  <CardFooter>
    <Button>액션 버튼</Button>
  </CardFooter>
</Card>

// ✅ 좋은 예 - 그리드 레이아웃
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
  {items.map((item) => (
    <Card key={item.id}>
      <CardHeader>
        <CardTitle>{item.title}</CardTitle>
      </CardHeader>
      <CardContent>
        <p>{item.description}</p>
      </CardContent>
    </Card>
  ))}
</div>
```

## 폼 컴포넌트 사용

### 1. Form 컴포넌트와 react-hook-form 연동
```tsx
// ✅ 좋은 예 - 폼 컴포넌트 사용
import { useForm } from 'react-hook-form';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';

const MyForm = () => {
  const form = useForm();

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="email"
          render={({ field }) => (
            <FormItem>
              <FormLabel>이메일</FormLabel>
              <FormControl>
                <Input placeholder="이메일을 입력하세요" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit">제출</Button>
      </form>
    </Form>
  );
};
```

### 2. Select 컴포넌트 사용
```tsx
// ✅ 좋은 예 - 셀렉트 컴포넌트
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

<Select>
  <SelectTrigger className="w-full">
    <SelectValue placeholder="옵션을 선택하세요" />
  </SelectTrigger>
  <SelectContent>
    <SelectItem value="option1">옵션 1</SelectItem>
    <SelectItem value="option2">옵션 2</SelectItem>
    <SelectItem value="option3">옵션 3</SelectItem>
  </SelectContent>
</Select>
```

## 다이얼로그 및 모달

### 1. Dialog 컴포넌트 사용
```tsx
// ✅ 좋은 예 - 다이얼로그 사용
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';

<Dialog>
  <DialogTrigger asChild>
    <Button variant="outline">다이얼로그 열기</Button>
  </DialogTrigger>
  <DialogContent className="sm:max-w-md">
    <DialogHeader>
      <DialogTitle>다이얼로그 제목</DialogTitle>
    </DialogHeader>
    <div className="space-y-4">
      <p>다이얼로그 내용</p>
      <Button>확인</Button>
    </div>
  </DialogContent>
</Dialog>
```

### 2. AlertDialog 컴포넌트 사용
```tsx
// ✅ 좋은 예 - 알림 다이얼로그
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';

<AlertDialog>
  <AlertDialogTrigger asChild>
    <Button variant="destructive">삭제</Button>
  </AlertDialogTrigger>
  <AlertDialogContent>
    <AlertDialogHeader>
      <AlertDialogTitle>정말 삭제하시겠습니까?</AlertDialogTitle>
      <AlertDialogDescription>
        이 작업은 되돌릴 수 없습니다. 정말로 삭제하시겠습니까?
      </AlertDialogDescription>
    </AlertDialogHeader>
    <AlertDialogFooter>
      <AlertDialogCancel>취소</AlertDialogCancel>
      <AlertDialogAction>삭제</AlertDialogAction>
    </AlertDialogFooter>
  </AlertDialogContent>
</AlertDialog>
```

## 테이블 컴포넌트

### 1. Table 컴포넌트 사용
```tsx
// ✅ 좋은 예 - 테이블 컴포넌트
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';

<Table>
  <TableHeader>
    <TableRow>
      <TableHead>이름</TableHead>
      <TableHead>이메일</TableHead>
      <TableHead>역할</TableHead>
    </TableRow>
  </TableHeader>
  <TableBody>
    {users.map((user) => (
      <TableRow key={user.id}>
        <TableCell>{user.name}</TableCell>
        <TableCell>{user.email}</TableCell>
        <TableCell>{user.role}</TableCell>
      </TableRow>
    ))}
  </TableBody>
</Table>
```

## 커스텀 컴포넌트 확장

### 1. 기존 컴포넌트 확장
```tsx
// ✅ 좋은 예 - 기존 컴포넌트 확장
import { Button } from '@/components/ui/button';
import { cn } from '@/lib/utils';

interface CustomButtonProps extends React.ComponentProps<typeof Button> {
  isLoading?: boolean;
}

const CustomButton = ({ isLoading, children, className, ...props }: CustomButtonProps) => {
  return (
    <Button
      className={cn("relative", className)}
      disabled={isLoading}
      {...props}
    >
      {isLoading && (
        <div className="absolute inset-0 flex items-center justify-center">
          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
        </div>
      )}
      <span className={cn(isLoading && "opacity-0")}>
        {children}
      </span>
    </Button>
  );
};
```

### 2. 새로운 컴포넌트 생성
```tsx
// ✅ 좋은 예 - 새로운 컴포넌트 생성
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';

interface JobCardProps {
  job: {
    id: string;
    title: string;
    company: string;
    location: string;
    salary?: string;
    tags: string[];
  };
  onApply?: (jobId: string) => void;
}

export const JobCard = ({ job, onApply }: JobCardProps) => {
  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="text-lg">{job.title}</CardTitle>
        <div className="flex items-center justify-between">
          <span className="text-sm text-gray-600">{job.company}</span>
          <span className="text-sm text-gray-500">{job.location}</span>
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          {job.salary && (
            <p className="text-sm font-medium text-green-600">{job.salary}</p>
          )}
          <div className="flex flex-wrap gap-2">
            {job.tags.map((tag) => (
              <Badge key={tag} variant="secondary">
                {tag}
              </Badge>
            ))}
          </div>
          {onApply && (
            <Button 
              className="w-full" 
              onClick={() => onApply(job.id)}
            >
              지원하기
            </Button>
          )}
        </div>
      </CardContent>
    </Card>
  );
};
```

## 접근성 고려사항

### 1. 키보드 네비게이션
```tsx
// ✅ 좋은 예 - 키보드 접근성
<Button
  onKeyDown={(e) => {
    if (e.key === 'Enter' || e.key === ' ') {
      handleClick();
    }
  }}
>
  접근 가능한 버튼
</Button>
```

### 2. 스크린 리더 지원
```tsx
// ✅ 좋은 예 - ARIA 라벨 사용
<Button aria-label="메뉴 열기">
  <MenuIcon />
</Button>

<Input 
  aria-describedby="email-error"
  aria-invalid={hasError}
/>
```

## 성능 최적화

### 1. 컴포넌트 메모이제이션
```tsx
// ✅ 좋은 예 - React.memo 사용
import { memo } from 'react';

const ExpensiveComponent = memo(({ data }: { data: any[] }) => {
  return (
    <div>
      {data.map(item => (
        <div key={item.id}>{item.name}</div>
      ))}
    </div>
  );
});
```

### 2. 조건부 렌더링 최적화
```tsx
// ✅ 좋은 예 - 조건부 렌더링
{isLoading ? (
  <div className="flex items-center justify-center p-8">
    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
  </div>
) : (
  <div className="space-y-4">
    {items.map(item => (
      <ItemCard key={item.id} item={item} />
    ))}
  </div>
)}
```